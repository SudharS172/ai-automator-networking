datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  currentRole   String?
  professionalField String?
  hobbies       String[]
  interests     String[]
  skills        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  
  calls         Call[]
  callRecords   CallRecord[]
  batchCalls    BatchCall[]
  smartSearchCalls SmartSearchCall[]
  matches       Match[]    @relation("UserMatches")
  matchedWith   Match[]    @relation("MatchedWithUsers")
  analysis      Analysis[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Call {
  id          String    @id @default(cuid())
  userId      String
  blandCallId String    @unique
  status      String
  transcript  String?   @db.Text
  audioUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  analysis    Analysis?
}

model CallRecord {
  id          String   @id @default(cuid())
  userId      String
  blandCallId String   @unique
  status      String
  transcript  String?  @db.Text
  audioUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model BatchCall {
  id          String   @id @default(cuid())
  userId      String
  blandCallId String   @unique
  status      String
  transcript  String?  @db.Text
  audioUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model SmartSearchCall {
  id          String   @id @default(cuid())
  userId      String
  blandCallId String   @unique
  status      String
  transcript  String?  @db.Text
  audioUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Analysis {
  id          String   @id @default(cuid())
  callId      String   @unique
  userId      String
  keyPoints   String[] 
  outcome     String
  nextSteps   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  call        Call     @relation(fields: [callId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Match {
  id              String   @id @default(cuid())
  userId          String
  matchedUserId   String
  score           Float
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation("UserMatches", fields: [userId], references: [id])
  matchedUser     User     @relation("MatchedWithUsers", fields: [matchedUserId], references: [id])
}